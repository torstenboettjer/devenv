#!/usr/bin/env bash

# Constants
readonly CMD_SHUTDOWN="shutdown -P now; init 0"

# Exit on error
set -e

# Check if the script is run with sudo
if [ "$EUID" -ne 0 ]; then
    echo "This script needs to run with sudo."
    exit 1
fi

#######################################
# System Update
#######################################
update() {
    echo "Updating Linux Environment"
    apt update && apt upgrade -y && apt autoremove -y && apt autoclean -y
    echo "Prepare: System update" >> ./setup.log
}

#######################################
# Visual Studio Code
#######################################
vsc() {
    echo "Installing VSCode"
    wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
    install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg
    sh -c 'echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list'
    rm -f packages.microsoft.gpg
    apt install apt-transport-https
    apt update
    apt install code -y
    echo "Installed Visual Code" >> ./setup.log
}

#######################################
# Python incl. developer tools
#######################################
py3() {
    echo "Installing Development Tools"
    apt install -y build-essential libssl-dev libnss3-dev libffi-dev make nano python3-pip curl wget gpg
    PYTHON_VERSION=$(python3 --version)
    echo "Python: $PYTHON_VERSION" >> ./setup.log
}

gth() {
    apt install gh -y
    GH_VERSION=$(gh --version)
    echo "Github: $GH_VERSION" >> ./setup.log
}

nxm() {
    echo "Installing nix as daemon, after install the shell session will be closed."
    sh <(curl -L https://nixos.org/nix/install) --daemon --yes
    echo "Nix installed, restarting ..."
    $CMD_SHUTDOWN
}

#######################################
# Docker AMD
#######################################
dkr() {
    clear
    echo "Installing Docker"
    apt update && apt install -y docker.io
    usermod -aG docker $1
    docker_grp="newgrp docker"
    # Execute the command as the specified user using sudo
    sudo -u "$1" $docker_grp
    systemctl enable docker.service
    DKR_VERSION=$(docker version)
    echo "$DKR_VERSION" >> ./setup.log
}

#######################################
# Snap application store
#######################################
snap() {
    clear
    echo "Installing snap"
    apt install libsquashfuse0 squashfuse fuse snapd -y
    systemctl enable --now snapd.apparmor
    #chgrp -R root /var
    SNAP_VERSION=$(snap version)
    echo "Installed $SNAP_VERSION" >> ./setup.log
}

#######################################
# Terraform
#######################################
tf() {
    clear
    echo "Installing Terraform"
    apt install -y gnupg software-properties-common
    wget -O- https://apt.releases.hashicorp.com/gpg | \
        gpg --dearmor | \
        tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
    gpg --no-default-keyring \
        --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg \
        --fingerprint
    echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/hashicorp.list
    apt update && apt install terraform -y
    TF_VERSION=$(terraform version)
    echo "Installed Terraform $TF_VERSION" >> ./setup.log
}

#######################################
# Install Rust
#######################################
rustlang() {
    echo "Installing rust"
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    source "$HOME/.cargo/env"
    rustup install stable
    rustup default stable
    rustup component add rust-src
    apt install build-essential
    RUST_VERSION=$(rustc --version)
    RUSTUP_VERSION=$(rustup --version)
    echo "Installed RUST $RUST_VERSION and RUSTUP $RUSTUP_VERSION" >> ./setup.log
}

#######################################
# PostgreSQL
#######################################
psql() {
    echo "Installing PostgreSQL"
    apt install -y postgresql
    apt install -y postgresql-contrib
    PSQL_VERSION=$(psql --version)
    echo "Installed PSQL $PSQL_VERSION" >> ./setup.log
}

#######################
# https://direnv.net/ #
######################

direnv() {
    echo "Installing Direnv"
    apt install direnv -y
    echo 'eval "$(direnv hook bash)"' >> /home/$SUDO_USER/.bashrc
    echo 'export DIRENV_LOG_FORMAT=""' >> /home/$SUDO_USER/.bashrc
    echo "Installed direnv" >> ./setup.log
}

# Select packages to install
main() {
    # inimal selection
    update
    $1
    $CMD_SHUTDOWN
}

# Execute main function with all the command-line arguments
main "$@"
